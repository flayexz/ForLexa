i - 1] == j && points[i] == k)
                    {
                        points[i - 1] = points[n - 2];
                        points[i] = points[n - 1];
                        s.points = points;
                        s.pointCount = s.pointCount - 2;
                        m_Stars[r] = s;
                        return;
                    }
                }
            }

            void RemoveTriangle(int i, int j, int k)
            {
                RemovePair(i, j, k);
                RemovePair(j, k, i);
                RemovePair(k, i, j);
            }

            void EdgeFlip(int i, int j)
            {
                int a = OppositeOf(i, j);
                int b = OppositeOf(j, i);
                RemoveTriangle(i, j, a);
                RemoveTriangle(j, i, b);
                AddTriangle(i, b, a);
                AddTriangle(j, a, b);
            }

            void Flip(NativeArray<float2> points, ref NativeArray<int> stack, ref int stackCount,
                int a, int b, int x)
            {
                int y = OppositeOf(a, b);

                if (y < 0)
                {
                    return;
                }

                if (b < a)
                {
                    int tmp = a;
                    a = b;
                    b = tmp;
                    tmp = x;
                    x = y;
                    y = tmp;
                }

                if (FindConstraint(a, b) != -1)
                {
                    return;
                }

                if (TessUtils.IsInsideCircle(